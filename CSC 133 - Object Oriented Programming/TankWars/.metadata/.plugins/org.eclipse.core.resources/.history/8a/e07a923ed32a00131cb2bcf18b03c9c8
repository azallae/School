package a1;

import java.util.Scanner;

public class Game {
	private GameWorld gw;
	private Scanner in = new Scanner(System.in);
	
	private int livesRemaining = 3;
	private int elaspedTime = 0;
	private int currentScore = 0;
		
	public Game() {
		gw = new GameWorld();
		play();
	}
	
	public int getLivesRemaining() {
		return livesRemaining;
	}

	public void setLivesRemaining(int livesRemaining) {
		this.livesRemaining = livesRemaining;
	}

	public int getElaspedTime() {
		return elaspedTime;
	}

	public void setElaspedTime(int elaspedTime) {
		this.elaspedTime = elaspedTime;
	}

	public int getCurrentScore() {
		return currentScore;
	}

	public void setCurrentScore(int currentScore) {
		this.currentScore = currentScore;
	}
	
	private void play() {
		//accept and execute user commands that operate on the GameWorld
		String cmd;
		
		do {
			System.out.print("Choose an action (? for help): ");
			cmd = in.nextLine();
		} while (getCommand(cmd));
		
		System.exit(0);
	}
	
	private boolean getCommand(String cmd) {
		if (cmd.equalsIgnoreCase("r")) {
			rightTurn();
		}
		else if (cmd.equalsIgnoreCase("l")) {
			leftTurn();
		}
		else if (cmd.equalsIgnoreCase("i")) {
			incSpeed();
		}
		else if (cmd.equalsIgnoreCase("k")) {
			decSpeed();
		}
		else if (cmd.equalsIgnoreCase("f")) {
			firePlayerMissile();
		}
		else if (cmd.equalsIgnoreCase("e")) {
			fireEnemyMissile();
		}
		else if (cmd.equalsIgnoreCase("1")) {
			hitByMissile();
		}
		else if (cmd.equalsIgnoreCase("2")) {
			missileCollision();
		}
		else if (cmd.equalsIgnoreCase("3")) {
			tankCollision();
		}
		else if (cmd.equalsIgnoreCase("t")) {
			elaspeTime();
		}
		else if (cmd.equalsIgnoreCase("d")) {
			displayStates();
		}
		else if (cmd.equalsIgnoreCase("m")) {
			showMap();
		}
		else if (cmd.equalsIgnoreCase("?")) {
			help();
		}
		else if (cmd.equalsIgnoreCase("q")) {
			return validateQuit();
		}
		else {
			System.out.println("Command not recognized.");
		}
		return true;
	}

	private void rightTurn() {
		gw.rightTurn();
	}

	private void leftTurn() {
		gw.leftTurn();
	}

	private void incSpeed() {
		gw.incSpeed();
	}

	private void decSpeed() {
		gw.decSpeed();
	}

	private void firePlayerMissile() {	
		gw.firePlayerMissile();
	}

	private void fireEnemyMissile() {
		gw.fireEnemyMissile();
	}

	private void hitByMissile() {
		gw.hitByMissile();
	}

	private void missileCollision() {
		gw.missileCollision();
	}

	private void tankCollision() {
		gw.tankCollision();
	}

	private void elaspeTime() {
		gw.elapseTime();
		
		
		
		gw.tickTock();
		System.out.println("Time has moved forward. " + gw.getElaspedTime() + " cycles has elapsed.");
	}

	private void displayStates() {
		
		
		System.out.println("Elapsed Time = " + gw.getElaspedTime() + "\nCurrent Score = " + gw.getCurrentScore() + "\nLives Remaining = " + gw.getLivesRemaining());
	}

	private void showMap() {
		gw.showMap();
	}

	private void help() {
		//help messages
		System.out.println("'r' (right turn) - turns your tank 5 degrees clockwise");
		System.out.println("'l' (left turn) - turns your tank 5 degrees counter-clockwise");
		System.out.println("'i' (increase speed) - increases your tank's speed by one unit");
		System.out.println("'k' (decrease speed) - slows down your tank by one unit");
		System.out.println("'f' (fire missile) - fires one of the your tank's missiles, if you have any remaining");
		System.out.println("'e' (enemy missile) - causes an enemy tank to fire a missile");
		System.out.println("'1' (missile hit) - causes a tank to be hit by a missile, which can result in tank destruction or armor reduction");
		System.out.println("'2' (missile collision) - causes two missiles to collide and destroy each other");
		System.out.println("'3' (tank collision) - causes a tank to collide with an object, blocking it from movement until the tank changes its direction");
		System.out.println("'t' (clock tick) - moves the game clock (aka Elasped Time) one tick forward");
		System.out.println("'d' (display) - displays the Current Score, Lives Remaining, and Elasped Time");
		System.out.println("'m' (map) - outputs a map of the world with object locations");
		System.out.println("'?' (help) - displays this help screen");
		System.out.println("'q' (quit) - endds the game and exits the program");
	}

	private boolean validateQuit() {
		System.out.print("Are you sure that you want to end this game and exit? (y/n) ");
		String yesOrNo = in.nextLine();
		if (yesOrNo.equalsIgnoreCase("y") || yesOrNo.equalsIgnoreCase("yes")) {
			return false;
		}
		return true;
	}
}
